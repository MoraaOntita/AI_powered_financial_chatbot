name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    env:
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      FLASK_APP: run.py
      FLASK_ENV: development

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        options: >-
          --health-cmd="pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5 
        ports:
          - 5433:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create .env file
      run: |
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
        echo "FLASK_APP=run.py" >> .env
        echo "FLASK_ENV=development" >> .env

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for PostgreSQL to be ready
      run: |
        docker-compose -f docker-compose.yml up -d
        for i in {1..10}; do
          if docker-compose -f docker-compose.yml exec postgres pg_isready -U $POSTGRES_USER -d $POSTGRES_DB; then
            echo "PostgreSQL is ready!"
            break
          fi
          echo "Waiting for PostgreSQL..."
          sleep 5
        done

    - name: Sleep before running tests
      run: sleep 10  # Increase this if necessary

    - name: Run backend tests using Docker Compose
      run: |
        docker-compose -f docker-compose.yml up --abort-on-container-exit --exit-code-from backend
        docker-compose -f docker-compose.yml exec backend pytest --junitxml=tests/test-results.xml

    - name: Shutdown services
      if: always()
      run: docker-compose -f docker-compose.yml down

    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: tests/test-results.xml
